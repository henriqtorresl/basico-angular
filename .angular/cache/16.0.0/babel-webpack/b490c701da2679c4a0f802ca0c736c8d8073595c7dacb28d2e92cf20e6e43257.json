{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/list.service\";\nimport * as i2 from \"@angular/common\";\nfunction ListRenderComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function ListRenderComponent_li_4_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const animal_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.showAge(animal_r1));\n    });\n    i0.ɵɵtext(3, \"Show age\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function ListRenderComponent_li_4_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const animal_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.removeAnimal(animal_r1));\n    });\n    i0.ɵɵtext(5, \"Excluir\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const animal_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" Nome: \", animal_r1.name, \" - Especie: \", animal_r1.type, \" \");\n  }\n}\nclass ListRenderComponent {\n  // dessa forma, o angular vai entender que eu estou criando um novo serviço e ele vem do ListService\n  constructor(listService) {\n    this.listService = listService;\n    this.animalDetails = \"\"; // iniciado como uma string vazia para não mostrar nada na tela caso o botão não seja apertado\n    this.animals = []; // array de objetos (array de Animal)\n    this.animal = {\n      name: \" \",\n      type: \" \",\n      age: 0\n    };\n    this.getAnimals(); // assim que eu iniciar a minha classe listRender ele vai iniciar esse método getAnimals\n  }\n\n  showAge(animal) {\n    // altera o valor do atributo animalDetails\n    this.animalDetails = `O pet ${animal.name} tem ${animal.age} ano(s)!`;\n  }\n  removeAnimal(animal) {\n    this.animals = this.listService.remove(this.animals, animal); // aqui nessa linha eu estou relacionando, fazendo o link do método do service com o método do componente\n  }\n\n  addAnimal(animal) {\n    this.listService.add(this.animals, animal);\n  }\n  getAnimals() {\n    this.listService.getAll().subscribe(animals => this.animals == animals);\n  }\n}\nListRenderComponent.ɵfac = function ListRenderComponent_Factory(t) {\n  return new (t || ListRenderComponent)(i0.ɵɵdirectiveInject(i1.ListService));\n};\nListRenderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ListRenderComponent,\n  selectors: [[\"app-list-render\"]],\n  decls: 7,\n  vars: 2,\n  consts: [[1, \"class\"], [4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n  template: function ListRenderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \"Animais:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"ul\");\n      i0.ɵɵtemplate(4, ListRenderComponent_li_4_Template, 6, 2, \"li\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"h3\");\n      i0.ɵɵtext(6);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.animals);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.animalDetails);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"button[_ngcontent-%COMP%] {\\r\\n    background-color: red;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9saXN0LXJlbmRlci9saXN0LXJlbmRlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0kscUJBQXFCO0FBQ3pCIiwic291cmNlc0NvbnRlbnQiOlsiYnV0dG9uIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});\nexport { ListRenderComponent };","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵlistener","ListRenderComponent_li_4_Template_button_click_2_listener","restoredCtx","ɵɵrestoreView","_r3","animal_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","showAge","ɵɵelementEnd","ListRenderComponent_li_4_Template_button_click_4_listener","ctx_r4","removeAnimal","ɵɵadvance","ɵɵtextInterpolate2","name","type","ListRenderComponent","constructor","listService","animalDetails","animals","animal","age","getAnimals","remove","addAnimal","add","getAll","subscribe","ɵɵdirectiveInject","i1","ListService","selectors","decls","vars","consts","template","ListRenderComponent_Template","rf","ctx","ɵɵtemplate","ListRenderComponent_li_4_Template","ɵɵproperty","ɵɵtextInterpolate"],"sources":["C:\\Users\\CTS\\IdeaProjects\\basico-angular\\src\\app\\components\\list-render\\list-render.component.ts","C:\\Users\\CTS\\IdeaProjects\\basico-angular\\src\\app\\components\\list-render\\list-render.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\nimport { Animal } from 'src/app/Animal';\n\nimport { ListService } from 'src/app/services/list.service';\n\n@Component({\n  selector: 'app-list-render',\n  templateUrl: './list-render.component.html',\n  styleUrls: ['./list-render.component.css']\n})\nexport class ListRenderComponent {\n\n  animalDetails: string = \"\";  // iniciado como uma string vazia para não mostrar nada na tela caso o botão não seja apertado\n\n  animals: Animal[] = [];   // array de objetos (array de Animal)\n  animal: Animal = {name: \" \", type: \" \", age: 0};\n\n  // dessa forma, o angular vai entender que eu estou criando um novo serviço e ele vem do ListService\n  constructor(private listService: ListService) {  // para poder trabalhar cm o service nessa classe, eu preciso criar um objeto do service dentro do meu construtor..\n    this.getAnimals();    // assim que eu iniciar a minha classe listRender ele vai iniciar esse método getAnimals\n  }\n\n  showAge(animal: Animal): void {\n    // altera o valor do atributo animalDetails\n    this.animalDetails = `O pet ${animal.name} tem ${animal.age} ano(s)!`;\n  }\n\n  removeAnimal(animal: Animal) {   \n    this.animals = this.listService.remove(this.animals, animal);      // aqui nessa linha eu estou relacionando, fazendo o link do método do service com o método do componente\n  }\n\n  addAnimal(animal: Animal) {\n    this.listService.add(this.animals, animal);\n  }\n\n  getAnimals(): void {    // o método getAnimals chama o método getAll do service listService\n    this.listService.getAll().subscribe((animals) => this.animals == animals);\n  }\n}\n","<div class=\"class\">\n\n\n    <h2>Animais:</h2>\n    <!--Usando o for:-->\n    <ul>\n        <!--Percorrendo a lista animals (é um atributo da classe ListRenderComponent)-->\n        <li *ngFor=\"let animal of animals\">\n            Nome: {{animal.name}} - Especie: {{animal.type}}\n            <button (click)=\"showAge(animal)\">Show age</button>\n            <button (click)=\"removeAnimal(animal)\">Excluir</button>\n        </li>\n    </ul>\n    <!--Caso nenhum botão seja apertado não vai ser mostrado nada na tela, pois animalDetails tem como valor padrão, uma string vazia-->\n    <h3>{{ animalDetails }}</h3>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}