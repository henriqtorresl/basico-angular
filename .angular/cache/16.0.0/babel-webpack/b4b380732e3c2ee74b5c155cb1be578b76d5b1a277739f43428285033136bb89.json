{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/list.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nfunction ListRenderComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1, \" Nome: \");\n    i0.ɵɵelementStart(2, \"a\", 2);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementStart(5, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function ListRenderComponent_li_4_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const animal_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.showAge(animal_r1));\n    });\n    i0.ɵɵtext(6, \"Show age\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function ListRenderComponent_li_4_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const animal_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.removeAnimal(animal_r1));\n    });\n    i0.ɵɵtext(8, \"Excluir\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const animal_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/list/\", animal_r1.id, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", animal_r1.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" - Especie: \", animal_r1.type, \" \");\n  }\n}\nclass ListRenderComponent {\n  // dessa forma, o angular vai entender que eu estou criando um novo serviço e ele vem do ListService\n  constructor(listService) {\n    this.listService = listService;\n    this.animalDetails = \"\"; // iniciado como uma string vazia para não mostrar nada na tela caso o botão não seja apertado\n    this.animals = []; // array de objetos (array de Animal)\n    this.getAnimals(); // assim que eu iniciar a minha classe listRender ele vai iniciar esse método getAnimals\n  }\n\n  showAge(animal) {\n    // altera o valor do atributo animalDetails\n    this.animalDetails = `O pet ${animal.name} tem ${animal.age} ano(s)!`;\n  }\n  removeAnimal(animal) {\n    this.animals = this.animals.filter(a => animal.name !== a.name); // aqui eu apenas removo o animal visualmente ()\n    this.listService.remove(animal.id); // relacionando o método remove animal com o método do service remove     \n  }\n\n  getAnimals() {\n    this.listService.getAll().subscribe(animals => this.animals = animals);\n  }\n}\nListRenderComponent.ɵfac = function ListRenderComponent_Factory(t) {\n  return new (t || ListRenderComponent)(i0.ɵɵdirectiveInject(i1.ListService));\n};\nListRenderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ListRenderComponent,\n  selectors: [[\"app-list-render\"]],\n  decls: 7,\n  vars: 2,\n  consts: [[1, \"class\"], [4, \"ngFor\", \"ngForOf\"], [3, \"routerLink\"], [3, \"click\"]],\n  template: function ListRenderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \"Animais:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"ul\");\n      i0.ɵɵtemplate(4, ListRenderComponent_li_4_Template, 9, 3, \"li\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"h3\");\n      i0.ɵɵtext(6);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.animals);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.animalDetails);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.RouterLink],\n  styles: [\"button[_ngcontent-%COMP%] {\\r\\n    background-color: red;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9saXN0LXJlbmRlci9saXN0LXJlbmRlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0kscUJBQXFCO0FBQ3pCIiwic291cmNlc0NvbnRlbnQiOlsiYnV0dG9uIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});\nexport { ListRenderComponent };","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","ListRenderComponent_li_4_Template_button_click_5_listener","restoredCtx","ɵɵrestoreView","_r3","animal_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","showAge","ListRenderComponent_li_4_Template_button_click_7_listener","ctx_r4","removeAnimal","ɵɵadvance","ɵɵpropertyInterpolate1","id","ɵɵtextInterpolate1","name","type","ListRenderComponent","constructor","listService","animalDetails","animals","getAnimals","animal","age","filter","a","remove","getAll","subscribe","ɵɵdirectiveInject","i1","ListService","selectors","decls","vars","consts","template","ListRenderComponent_Template","rf","ctx","ɵɵtemplate","ListRenderComponent_li_4_Template","ɵɵproperty","ɵɵtextInterpolate"],"sources":["C:\\Users\\CTS\\IdeaProjects\\basico-angular\\src\\app\\components\\list-render\\list-render.component.ts","C:\\Users\\CTS\\IdeaProjects\\basico-angular\\src\\app\\components\\list-render\\list-render.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\nimport { Animal } from 'src/app/Animal';\n\nimport { ListService } from 'src/app/services/list.service';\n\n@Component({\n  selector: 'app-list-render',\n  templateUrl: './list-render.component.html',\n  styleUrls: ['./list-render.component.css']\n})\nexport class ListRenderComponent {\n\n  animalDetails: string = \"\";  // iniciado como uma string vazia para não mostrar nada na tela caso o botão não seja apertado\n\n  animals: Animal[] = [];   // array de objetos (array de Animal)\n\n  // dessa forma, o angular vai entender que eu estou criando um novo serviço e ele vem do ListService\n  constructor(private listService: ListService) {  // para poder trabalhar cm o service nessa classe, eu preciso criar um objeto do service dentro do meu construtor..\n    this.getAnimals();    // assim que eu iniciar a minha classe listRender ele vai iniciar esse método getAnimals\n  }\n\n  showAge(animal: Animal): void {\n    // altera o valor do atributo animalDetails\n    this.animalDetails = `O pet ${animal.name} tem ${animal.age} ano(s)!`;\n  }\n\n  removeAnimal(animal: Animal) {\n    this.animals = this.animals.filter((a) => animal.name !== a.name);   // aqui eu apenas removo o animal visualmente ()\n    this.listService.remove(animal.id);   // relacionando o método remove animal com o método do service remove     \n  }\n\n  getAnimals(): void {    // o método getAnimals chama o método getAll do service listService\n    this.listService.getAll().subscribe((animals) => this.animals = animals);\n  }\n}\n","<div class=\"class\">\n    <h2>Animais:</h2>\n    <!--Usando o for:-->\n    <ul>\n        <!--Percorrendo a lista animals (é um atributo da classe ListRenderComponent)-->\n        <li *ngFor=\"let animal of animals\">\n            Nome: <a routerLink=\"/list/{{animal.id}}\"> {{ animal.name }} </a> - Especie: {{animal.type}}\n            <button (click)=\"showAge(animal)\">Show age</button>\n            <button (click)=\"removeAnimal(animal)\">Excluir</button>\n        </li>\n    </ul>\n    <!--Caso nenhum botão seja apertado não vai ser mostrado nada na tela, pois animalDetails tem como valor padrão, uma string vazia-->\n    <h3>{{ animalDetails }}</h3>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}