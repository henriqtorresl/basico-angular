{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ListRenderComponent = class ListRenderComponent {\n  // dessa forma, o angular vai entender que eu estou criando um novo serviço e ele vem do ListService\n  constructor(listService) {\n    this.listService = listService;\n    this.animalDetails = \"\"; // iniciado como uma string vazia para não mostrar nada na tela caso o botão não seja apertado\n    this.animals = []; // array de objetos (array de Animal)\n    this.getAnimals(); // assim que eu iniciar a minha classe listRender ele vai iniciar esse método getAnimals\n  }\n\n  showAge(animal) {\n    // altera o valor do atributo animalDetails\n    this.animalDetails = `O pet ${animal.name} tem ${animal.age} ano(s)!`;\n  }\n  removeAnimal(animal) {\n    this.animals = this.listService.remove(this.animals, animal); // aqui nessa linha eu estou relacionando, fazendo o link do método do service com o método do componente\n  }\n\n  getAnimals() {\n    this.listService.getAll().subscribe(animals => this.animals = animals);\n  }\n};\nListRenderComponent = __decorate([Component({\n  selector: 'app-list-render',\n  templateUrl: './list-render.component.html',\n  styleUrls: ['./list-render.component.css']\n})], ListRenderComponent);\nexport { ListRenderComponent };","map":{"version":3,"names":["Component","ListRenderComponent","constructor","listService","animalDetails","animals","getAnimals","showAge","animal","name","age","removeAnimal","remove","getAll","subscribe","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\CTS\\IdeaProjects\\basico-angular\\src\\app\\components\\list-render\\list-render.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\nimport { Animal } from 'src/app/Animal';\n\nimport { ListService } from 'src/app/services/list.service';\n\n@Component({\n  selector: 'app-list-render',\n  templateUrl: './list-render.component.html',\n  styleUrls: ['./list-render.component.css']\n})\nexport class ListRenderComponent {\n\n  animalDetails: string = \"\";  // iniciado como uma string vazia para não mostrar nada na tela caso o botão não seja apertado\n\n  animals: Animal[] = [];   // array de objetos (array de Animal)\n\n  // dessa forma, o angular vai entender que eu estou criando um novo serviço e ele vem do ListService\n  constructor(private listService: ListService) {  // para poder trabalhar cm o service nessa classe, eu preciso criar um objeto do service dentro do meu construtor..\n    this.getAnimals();    // assim que eu iniciar a minha classe listRender ele vai iniciar esse método getAnimals\n  }\n\n  showAge(animal: Animal): void {\n    // altera o valor do atributo animalDetails\n    this.animalDetails = `O pet ${animal.name} tem ${animal.age} ano(s)!`;\n  }\n\n  removeAnimal(animal: Animal) {    \n    this.animals = this.listService.remove(this.animals, animal);      // aqui nessa linha eu estou relacionando, fazendo o link do método do service com o método do componente\n  }\n\n  getAnimals(): void {    // o método getAnimals chama o método getAll do service listService\n    this.listService.getAll().subscribe((animals) => this.animals = animals);\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAWzC,IAAaC,mBAAmB,GAAhC,MAAaA,mBAAmB;EAM9B;EACAC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAL/B,KAAAC,aAAa,GAAW,EAAE,CAAC,CAAE;IAE7B,KAAAC,OAAO,GAAa,EAAE,CAAC,CAAG;IAIxB,IAAI,CAACC,UAAU,EAAE,CAAC,CAAI;EACxB;;EAEAC,OAAOA,CAACC,MAAc;IACpB;IACA,IAAI,CAACJ,aAAa,GAAG,SAASI,MAAM,CAACC,IAAI,QAAQD,MAAM,CAACE,GAAG,UAAU;EACvE;EAEAC,YAAYA,CAACH,MAAc;IACzB,IAAI,CAACH,OAAO,GAAG,IAAI,CAACF,WAAW,CAACS,MAAM,CAAC,IAAI,CAACP,OAAO,EAAEG,MAAM,CAAC,CAAC,CAAM;EACrE;;EAEAF,UAAUA,CAAA;IACR,IAAI,CAACH,WAAW,CAACU,MAAM,EAAE,CAACC,SAAS,CAAET,OAAO,IAAK,IAAI,CAACA,OAAO,GAAGA,OAAO,CAAC;EAC1E;CACD;AAvBYJ,mBAAmB,GAAAc,UAAA,EAL/Bf,SAAS,CAAC;EACTgB,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACWjB,mBAAmB,CAuB/B;SAvBYA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}