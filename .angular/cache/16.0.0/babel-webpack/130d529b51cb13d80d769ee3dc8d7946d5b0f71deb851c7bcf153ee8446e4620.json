{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ListService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = \"http://localhost:3000/animals\";\n  }\n  // boa prática: como esse método faz relação com o método removeAnimal() da classe ListRender, eu coloco nome parecido entre os métodos\n  remove(id) {\n    return 2;\n  }\n  getAll() {\n    return this.http.get(this.apiUrl);\n  }\n  getItem(id) {\n    return this.http.get(`${this.apiUrl}/${id}`); // pegando o id do parâmetro e jogando na minha url\n  }\n}\n\nListService.ɵfac = function ListService_Factory(t) {\n  return new (t || ListService)(i0.ɵɵinject(i1.HttpClient));\n};\nListService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ListService,\n  factory: ListService.ɵfac,\n  providedIn: 'root'\n});\nexport { ListService };","map":{"version":3,"names":["ListService","constructor","http","apiUrl","remove","id","getAll","get","getItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\CTS\\IdeaProjects\\basico-angular\\src\\app\\services\\list.service.ts"],"sourcesContent":["// um service normalmente faz requisições com a API (com o banco de dados)\n// como nn tenho banco de dados, esse service list vai trabalhar com os dados do componente list-render\nimport { Injectable } from '@angular/core';\n\nimport { Animal } from '../Animal';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ListService {\n\n  private apiUrl = \"http://localhost:3000/animals\";\n\n  constructor(private http: HttpClient) { }\n\n  // boa prática: como esse método faz relação com o método removeAnimal() da classe ListRender, eu coloco nome parecido entre os métodos\n  remove(id: number) {\n    return 2;\n  }\n\n  getAll(): Observable<Animal[]> {    // esse método vai preencher uma lista de Animal\n    return this.http.get<Animal[]>(this.apiUrl);\n  }\n\n  getItem(id: number): Observable<Animal> {\n    return this.http.get<Animal>(`${this.apiUrl}/${id}`); // pegando o id do parâmetro e jogando na minha url\n  }\n}\n"],"mappings":";;AAUA,MAGaA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,+BAA+B;EAER;EAExC;EACAC,MAAMA,CAACC,EAAU;IACf,OAAO,CAAC;EACV;EAEAC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAW,IAAI,CAACJ,MAAM,CAAC;EAC7C;EAEAK,OAAOA,CAACH,EAAU;IAChB,OAAO,IAAI,CAACH,IAAI,CAACK,GAAG,CAAS,GAAG,IAAI,CAACJ,MAAM,IAAIE,EAAE,EAAE,CAAC,CAAC,CAAC;EACxD;;;AAjBWL,WAAW,C;mBAAXA,WAAW,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXZ,WAAW,C;SAAXA,WAAW;EAAAa,OAAA,EAAXb,WAAW,CAAAc,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPf,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}